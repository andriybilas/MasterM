@using Litium.Resources
@using Site.Infrastuctures.ModelHelpers.Product

<style type="text/css">
	div.drop, div.drop2 {border: 1px solid black;width: 5em;height: 5em;padding: 0.5em; }
	tr.drag { }
	.dragggable {border: 1px solid black;background: transparent; }
</style>    


<div id="partial-replacement">

@functions
{
	private static string AssignCheckBoxTemplate()
	{
		return "<input type='checkbox' name='assign-checkbox' value='<#= Published #>' />";
	}

	private static string AssignAllCheckBoxTemplate()
	{
		return "<input type='checkbox' name='group-assign-checkbox' id='group-assign-checkbox-id'/>" +
			   "<label for='group-assign-checkbox-id'>" + StoreResourceStrings.All + "</label>";
	}

    private static string PublishedCheckBoxTemplate()
    {
        return "<input type='checkbox' name='publish-checkbox' value='<#= Published #>' />";
    }

    private static string PublisheAllCheckBoxTemplate()
    {
        return "<input type='checkbox' name='group-publish-checkbox' id='group-publish-checkbox-id'/>" +
               "<label for='group-publish-checkbox-id'>" + StoreResourceStrings.Published + "</label>";
    }

}

@Html.Partial("Partial/QuickSearch")

    @{
        Html.Telerik().Grid<ProductModel>()
            .Name("ProductsGridView")
            .DataKeys(keys => keys.Add(c => c.Id).RouteKey("productId"))
            .DataBinding(dataBinding => dataBinding.Ajax().Select("GetProductsAsync", "Product"))
            .EnableCustomBinding(true)
            .Columns(columns =>
                         {
                             columns.Bound(c => c.Published).ClientTemplate(AssignCheckBoxTemplate()).Filterable(false)
                                 .Title(AssignAllCheckBoxTemplate()).Sortable(false).HtmlAttributes(new {style = "text-align:center;width:90px; word-wrap:break-word;"});
                             columns.Bound(c => c.Name);
                             columns.Bound(c => c.Price).Format("{0:c}").HtmlAttributes(new { style = "text-align:right; width:50px;" });
                             columns.Bound(c => c.StockBalance).HtmlAttributes(new {style = "text-align:center !important; width:50px;"});
                             columns.Bound(c => c.Category).HtmlAttributes(new {style = "text-align:center; width:50px;"}).Filterable(false);
                             columns.Bound(c => c.Published).ClientTemplate(PublishedCheckBoxTemplate()).Title(PublisheAllCheckBoxTemplate()).Sortable(false).HtmlAttributes(new {style = "text-align:center;"});
                         })
            .ToolBar(commands => commands.Custom().Name("PublishGridCommand").Text(WebStroreResource.Publish).ButtonType(GridButtonType.Text))
            .Pageable(pagerAction =>
                          {
                              pagerAction.PageSize(20);
                              pagerAction.Total(10);
                          })
            .ClientEvents(evt =>
                              {
                                  evt.OnDataBound("UpdateCheckBoxStatus");
                                  evt.OnRowDataBound("ProductsGridViewRowDataBound");
                                  evt.OnCommand("OnCommand");
                                  evt.OnError("ExceptionHandler");
                              })
            .Sortable()
            .Filterable()
            .Render();
}
    <script type="text/javascript" language="javascript" >

        $( document ).ready( PageLoad );

        function PageLoad( )
        {
            $( 'input[name="group-assign-checkbox"]' ).click( AssignAllCheckedChenged );
            $( '.t-grid-AssignToCategoryCommand' ).prop( "href", "#" );
            $( 'input[name="group-publish-checkbox"]' ).click( function () { PublishAllCheckedChenged(); } );
            $( '.t-grid-PublishGridCommand' ).prop( "href", "#" );
            $( '.t-grid-PublishGridCommand' ).click( function () { PublicshRequestAsync(); } );
        }

        function PublicshRequestAsync()
        {
            if ( !confirm( "@StoreResourceStrings.PublishConfirmation" ) )
                return false;

            var products = new Array();

            $( "input[name='publish-checkbox']" ).each( function ()
            {
                products.push( new PublishedProduct( $( this ).prop( "id" ), $( this ).prop( "checked" ) ) );
            } );

            $.ajax( {
                contentType: 'application/json',
                dataType: 'json',
                type: 'post',
                url: "/Product/PublishProductsAsync",
                traditional: true,
                data: JSON.stringify( products ),
                error: ExceptionHandler
                //success: onRulesSaved,
                //error: function (data, textStatus) { alert(textStatus); } 
            } );
        }

        function PublishedProduct( id, published )
        {
            this.Id = id;
            this.Published = published;
        }

        function PublishAllCheckedChenged()
        {
            if ( $( 'input[name="group-publish-checkbox"]' ).prop( "checked" ) == true )            
                $( "input[name='publish-checkbox']" ).each( function( ) { $( this ).prop( "checked", true ).trigger( "change" ); } );
            else            
                $( "input[name='publish-checkbox']" ).each( function( ) { $( this ).prop( "checked", false ).trigger( "change" ); } );
        }

        function AssignAllCheckedChenged( )
        {
            if ( $( 'input[name="group-assign-checkbox"]' ).prop( "checked" ) == true )
                $( "input[name='assign-checkbox']" ).each( function( ) { $( this ).prop( "checked", true ).trigger( "change" ); } );
            else
                $( "input[name='assign-checkbox']" ).each( function( ) { $( this ).prop( "checked", false ).trigger( "change" ); } );
        }

        function ProductsGridViewRowDataBound( evt )
        {
            $( evt.row ).find( "input[name='publish-checkbox']" ).prop( "id", evt.dataItem.Id );
            var checkBox = $( evt.row ).find( "input[name='assign-checkbox']" );
            checkBox.prop( "id", evt.dataItem.Id );
            checkBox.change( function( ) { AssignCheckBoxCheckedChanged( checkBox, evt ); } );
        }

        function AssignCheckBoxCheckedChanged( checkBox, evt )
        {
            if ( $( checkBox ).prop( "checked" ) == true && !$( evt.row ).hasClass( "drag" ) )
            {
                $( evt.row ).addClass( "drag" );
                $( 'tr.drag' ).draggable( {
                    helper : function( ) { return $( '<div style="border:1px solid black;background: transparent;"><table></table></div>' )
                        .find( 'table' ).append( $( 'tr.drag' ).clone( ).addClass( "dragggable" ) ).appendTo( "body" ); },
                    revert : true
                } );
            }
            else
                $( evt.row ).removeClass( "drag" );
        }

        function ProductGridRebind()
        {
            if ( $( "#ProductsGridView" ).length != 0 )
                $( "#ProductsGridView" ).data( "tGrid" ).ajaxRequest();
        }

        function UpdateCheckBoxStatus()
        {
            HideLoader( );
            $( "input[name='publish-checkbox']" ).each( function ()
            {
                if ( $( this ).val() == "true" )
                    $( this ).prop( "checked", true );
            } );

            $( "input[name='has-image-check-box']" ).each( function ()
            {
                if ( $( this ).val() == "true" )
                    $( this ).prop( "checked", true );
            } );

            $( 'input[name="group-publish-checkbox"]' ).prop( "checked", false );
        }

        function OnCommand( evt )
        {
            setTimeout( UpdateCheckBoxStatus, 100 );
        }
    </script>

    </div>